---
import Post from "$lib/components/common/Post.astro";
import { getPost } from "$lib/common/getPostById";
import { Icon } from "astro-icon/components";
import { getLocale } from "@paraglide/runtime";
import { Picture } from "astro:assets";
import MsImg from "$lib/assets/images/mf.avif";
import LinkPost from "$lib/components/common/LinkPost.astro";
import { BerliLink, RaauLink, Ms01Link } from "$lib/common/consts";

const translations = {
    en: {
        freedom: "Freedom",
        freedomText:
            "Fed up with the costs and limitations of renting a virtual server, I decided to set up my own dedicated server. To my pleasant surprise, it wasnt as complicated as I expected! thats how I got my first dedicated machine, which now hosts",
        prerequisites: "Prerequisites",
        prerequisitesText: "A pendrive and internet",
        downloads: "Downloads",
        downloadsList: "A list of files that you need download",
        description: "Description",
        link: "Link",
        boot: "Booteable",
        bootText:
            "Now you need to use the UEFI Shell ISO and boot it to the pendrive. You need create the booteable pendrive in this scheme:",
        bootSelection: "Boot selection",
        partitionScheme: "Partition scheme",
        filesystem: "Filesystem",
        bootInstructions:
            "Then extract the bios in the .zip and copy it to the pendrive that you boot with the UEFI Shell.",
        update: "Update",
        updateText: "Insert the pendrive in the",
        updateTextEnd: "and reboot, hit",
        updateTextEnd2:
            "to enter the BIOS menu, select UEFI Shell or boot from the pendrive.. type and enter",
        updateTextEnd3: "and select",
        autoUpdate: "The update will start automatically..",
        computers: "Computers never sleep",
        computersText:
            "You can find all detailed technical specifications and pricing information in MS-01. Thats all, if you have any questions you can write to me.",
        andThisWebsite: "and this website",
    },
    zh: {
        freedom: "自由",
        freedomText:
            "厌倦了租用虚拟服务器的成本和限制，我决定建立自己的专用服务器。让我惊喜的是，这并不像我预期的那么复杂！这就是我如何得到我的第一台专用机器，现在它托管着",
        prerequisites: "先决条件",
        prerequisitesText: "U盘和网络",
        downloads: "下载",
        downloadsList: "您需要下载的文件列表",
        description: "描述",
        link: "链接",
        boot: "可启动",
        bootText:
            "现在您需要使用UEFI Shell ISO并将其引导到U盘。您需要按照以下方案创建可启动U盘：",
        bootSelection: "引导选择",
        partitionScheme: "分区方案",
        filesystem: "文件系统",
        bootInstructions:
            "然后将BIOS解压缩到.zip中，并将其复制到使用UEFI Shell引导的U盘中。",
        update: "更新",
        updateText: "将U盘插入",
        updateTextEnd: "并重启，按",
        updateTextEnd2: "进入BIOS菜单，选择UEFI Shell或从U盘启动..输入并回车",
        updateTextEnd3: "并选择",
        autoUpdate: "更新将自动开始..",
        computers: "计算机永不休眠",
        computersText:
            "您可以在MS-01中找到所有详细的技术规格和价格信息。就这样，如果您有任何问题可以写信给我。",
        andThisWebsite: "和这个网站",
    },
};

const downloadsTableData = [
    {
        name: "BIOS",
        description: {
            en: "Official BIOS",
            zh: "官方BIOS",
        },
        link: "https://www.minisforum.com/new/support?lang=en#/support/page/download/108",
        linkText: {
            en: "Web",
            zh: "网页",
        },
    },
    {
        name: "UEFI Shell",
        description: {
            en: "ISO of UEFI Shell",
            zh: "UEFI Shell的ISO",
        },
        link: "https://github.com/pbatard/UEFI-Shell/releases",
        linkText: "GitHub",
    },
    {
        name: "Rufus",
        description: {
            en: "Bootable USB tool",
            zh: "可启动USB工具",
        },
        link: "https://rufus.ie/en/",
        linkText: {
            en: "Web",
            zh: "网页",
        },
    },
];

const bootTableData = [
    {
        bootSelection: {
            en: "UEFI-Shell latest ISO",
            zh: "UEFI-Shell最新ISO",
        },
        partitionScheme: "GPT",
        filesystem: "FAT32",
    },
];

const ID = "aa614ca5-0940-41a1-bf80-710096df26ac";
const post = await getPost(ID);
if (!post) throw new Error("Post not found");

const lang = getLocale();
const t = translations[lang];
---

<Post
    id={ID}
    title={post.title[lang]}
    url={post.url}
    description={post.description[lang]}
    readTime={post.readTime}
    author={post.author}
    tags={post.tags}
    date={post.date}
>
    <h1 id="freedom" class="blog-content-title">
        <a href="#freedom">{t.freedom}</a>
    </h1>
    <Picture
        src={MsImg}
        alt="MS-01"
        class="w-full rounded-lg grayscale"
        formats={["avif", "webp"]}
        width={800}
        height={600}
    />
    <p class="blog-content-paragraph">
        {t.freedomText}
        <LinkPost title={RaauLink.title} url={RaauLink.url} />, <LinkPost
            title={BerliLink.title}
            url={BerliLink.url}
        />, {t.andThisWebsite}.
    </p>

    <h2 id="prerequisites" class="blog-content-title">
        <a href="#prerequisites">{t.prerequisites}</a>
    </h2>
    <p class="blog-content-paragraph flex gap-2">
        {t.prerequisitesText}
        <Icon
            width="1em"
            height="1em"
            class="duration-200 group-hover:translate-x-[1.5px]"
            name="heart"
        />
    </p>

    <h2 id="downloads" class="blog-content-title">
        <a href="#downloads">{t.downloads}</a>
    </h2>
    <p class="blog-content-paragraph">{t.downloadsList}</p>
    <div
        class="blog-content-paragraph overflow-x-auto rounded-lg border border-border"
    >
        <table
            class="min-w-full divide-y-2 divide-border bg-background text-sm"
        >
            <thead class="text-left">
                <tr>
                    <th
                        class="whitespace-nowrap md:px-4 px-2 py-2 font-medium text-secondary-foreground"
                        >#</th
                    >
                    <th
                        class="whitespace-nowrap md:px-4 px-2 py-2 font-medium text-secondary-foreground"
                        >{t.description}</th
                    >
                    <th
                        class="whitespace-nowrap md:px-4 px-2 py-2 font-medium text-secondary-foreground"
                        >{t.link}</th
                    >
                </tr>
            </thead>

            <tbody class="divide-y divide-border">
                {
                    downloadsTableData.map((item) => (
                        <tr>
                            <td class="whitespace-nowrap md:px-4 px-2 py-2 text-secondary-foreground">
                                {item.name}
                            </td>
                            <td class="whitespace-nowrap md:px-4 px-2 py-2 text-secondary-foreground">
                                {item.description[lang]}
                            </td>
                            <td class="whitespace-nowrap md:px-4 px-2 py-2 text-secondary-foreground">
                                <LinkPost
                                    title={
                                        typeof item.linkText === "string"
                                            ? item.linkText
                                            : item.linkText[lang]
                                    }
                                    url={item.link}
                                />
                            </td>
                        </tr>
                    ))
                }
            </tbody>
        </table>
    </div>

    <h2 id="boot" class="blog-content-title">
        <a href="#boot">{t.boot}</a>
    </h2>
    <p class="blog-content-paragraph">
        {t.bootText}
    </p>
    <div class="overflow-x-auto rounded-lg border border-border">
        <table
            class="min-w-full divide-y-2 divide-border bg-background text-sm"
        >
            <thead class="text-left">
                <tr>
                    <th
                        class="whitespace-nowrap md:px-4 px-2 py-2 font-medium text-secondary-foreground"
                    >
                        {t.bootSelection}
                    </th>
                    <th
                        class="whitespace-nowrap md:px-4 px-2 py-2 font-medium text-secondary-foreground"
                    >
                        {t.partitionScheme}
                    </th>
                    <th
                        class="whitespace-nowrap md:px-4 px-2 py-2 font-medium text-secondary-foreground"
                    >
                        {t.filesystem}
                    </th>
                </tr>
            </thead>

            <tbody class="divide-y divide-border">
                {
                    bootTableData.map((item) => (
                        <tr>
                            <td class="whitespace-nowrap md:px-4 px-2 py-2 text-secondary-foreground">
                                {item.bootSelection[lang]}
                            </td>
                            <td class="whitespace-nowrap md:px-4 px-2 py-2 text-secondary-foreground">
                                {item.partitionScheme}
                            </td>
                            <td class="whitespace-nowrap md:px-4 px-2 py-2 text-secondary-foreground">
                                {item.filesystem}
                            </td>
                        </tr>
                    ))
                }
            </tbody>
        </table>
    </div>
    <p class="blog-content-paragraph">
        {t.bootInstructions}
    </p>

    <h2 id="update" class="blog-content-title">
        <a href="#update">{t.update}</a>
    </h2>

    <p class="blog-content-paragraph">
        {t.updateText}
        <LinkPost title={Ms01Link.title} url={Ms01Link.url} />
        {t.updateTextEnd}
        <code>DEL</code>
        {t.updateTextEnd2}
        <code>FS0:</code>
        {t.updateTextEnd3}
        <code>AfuEfiFlash.nsh</code>
    </p>
    <p class="blog-content-paragraph flex gap-2">
        {t.autoUpdate}
        <Icon
            width="1em"
            height="1em"
            class="duration-200 group-hover:translate-x-[1.5px]"
            name="rocket"
        />
    </p>

    <h2 id="computers" class="blog-content-title">
        <a href="#computers">{t.computers}</a>
    </h2>
    <p class="blog-content-paragraph">
        {t.computersText}
    </p>
</Post>
